// **************************************************************************
//     Filename: MCFunctions.CPP
// Date Created: 9/21/2013
//      Version: 0.01
//
//
//  COPYRIGHT (c) Robertsonics 2013. All Rights Reserved
//
// **************************************************************************
//
// Revision History
//
// Date/Rev  Description
// --------  -----------
//
// V0.01     First version created.
// 9/21/13

#define TRIG_FLAGS_TYPE			0x03
#define TRIG_FLAGS_INTERFACE	0x04
#define TRIG_FLAGS_INVERT		0x08
#define TRIG_FLAGS_RETRIGGER	0x10
#define TRIG_FLAGS_LOOP			0x20
#define TRIG_FLAGS_POLY			0x40
#define TRIG_FLAGS_LOCK			0x80


// **************************************************************************
// resetTrigger(): Restore the Trigger settings to default
void MainComponent::resetTrigger(void)
{
	interfaceBox->setSelectedId(1, dontSendNotification);
	functionBox->setSelectedId(1, dontSendNotification);
	typeBox->setSelectedId(1, dontSendNotification);
	typeBox->setEnabled(true);
	outputBox->setSelectedId(1, dontSendNotification);
	outputBox->setEnabled(true);
	invertToggle->setToggleState(false, dontSendNotification);
	retriggerToggle->setToggleState(true, dontSendNotification);
	retriggerToggle->setEnabled(true);
	loopToggle->setToggleState(false, dontSendNotification);
	loopToggle->setEnabled(true);
	polyToggle->setToggleState(true, dontSendNotification);
	polyToggle->setEnabled(true);
	lockToggle->setToggleState(true, dontSendNotification);
	lockToggle->setEnabled(true);
	trigVolSlider->setValue(0.0, dontSendNotification);
	trigVolSlider->setEnabled(true);
	lowText->setText("", dontSendNotification);
	lowText->setEnabled(false);
	highText->setText("", dontSendNotification);
	highText->setEnabled(false);
	labelRange->setEnabled(false);
	labelLow->setEnabled(false);
	labelHigh->setEnabled(false);
	labelOutput->setEnabled(true);
	labelTriggerVol->setEnabled(true);
}

// **************************************************************************
// reset(): Reset everything to default, clear the edit window.
void MainComponent::reset(void)
{
	baudBox->setSelectedId(6, dontSendNotification);
	vol1Slider->setValue(0.0, dontSendNotification);
	vol2Slider->setValue(0.0, dontSendNotification);
	vol3Slider->setValue(0.0, dontSendNotification);
	vol4Slider->setValue(0.0, dontSendNotification);
	vol5Slider->setValue(0.0, dontSendNotification);
	vol6Slider->setValue(0.0, dontSendNotification);
	vol7Slider->setValue(0.0, dontSendNotification);
	vol8Slider->setValue(0.0, dontSendNotification);
	triggerBox->setSelectedId(1, dontSendNotification);
	resetTrigger();

	addButton->setEnabled(true);
	updateButton->setEnabled(false);
	deleteButton->setEnabled(false);
	copyButton->setEnabled(false);
	testButton->setEnabled(false);

	channelBox->setSelectedId(1, dontSendNotification);
	releaseSlider->setValue(0.0, dontSendNotification);
	velocityToggle->setToggleState(false, dontSendNotification);
	noteOffToggle->setToggleState(false, dontSendNotification);
	pitchBox->setSelectedId(2, dontSendNotification);

	toggleOut1->setToggleState(false, dontSendNotification);
	toggleOut2->setToggleState(false, dontSendNotification);
	toggleOut3->setToggleState(false, dontSendNotification);
	toggleOut4->setToggleState(false, dontSendNotification);

	mInitStrings.clear();
	mInitStrings.add("********************************************************************");
	mInitStrings.add(newLine);
	mInitStrings.add("This file was generated by the Tsunami Configurator v0.31");
	mInitStrings.add(newLine);
	mInitStrings.add("It's required only if you wish to over-ride the default settings.");
	mInitStrings.add(newLine);
	mInitStrings.add("You may add your own comments below this line -->");
	updateInitWindow();
}

// **************************************************************************
// buildTriggerDesc(): Create a #TRIG NN line according to the current
//  settings
String MainComponent::buildTriggerDesc(void)
{

String tStr;
String subStr;
int i, j;
unsigned char flags;

	// Trigger command and trigger number
	tStr = "#TRIG ";
	if (triggerBox->getSelectedId() < 10)
		tStr += 0;
	tStr += triggerBox->getSelectedId();
	tStr += ", ";

	// Build the trigger flags byte
	flags = (typeBox->getSelectedId() - 1) & TRIG_FLAGS_TYPE;
	if (interfaceBox->getSelectedId() > 1)
		flags |= TRIG_FLAGS_INTERFACE;
	if (invertToggle->getToggleState())
		flags |= TRIG_FLAGS_INVERT;
	if (retriggerToggle->getToggleState())
		flags |= TRIG_FLAGS_RETRIGGER;
	if (loopToggle->getToggleState())
		flags |= TRIG_FLAGS_LOOP;
	if (polyToggle->getToggleState())
		flags |= TRIG_FLAGS_POLY;
	if (lockToggle->getToggleState())
		flags |= TRIG_FLAGS_LOCK;
	tStr += flags;
	tStr += ", ";

	// Trigger volume
	i = (int)trigVolSlider->getValue();
	tStr += i;
	tStr += ", ";

	// Output
	tStr += outputBox->getSelectedId() - 1;
	tStr += ", ";

	// Function
	tStr += functionBox->getSelectedId();
	tStr += ", ";

	if (((functionBox->getSelectedId() > 1) && (functionBox->getSelectedId() < 8)) || functionBox->getSelectedId() == 14) {

		// Low range
		subStr = lowText->getText();
		i = subStr.getIntValue();
		if ((i > 0) && (i <= 2048)) {
			tStr += i;
			tStr += ", ";
		}
		else
			tStr = "";

		// High range
		subStr = highText->getText();
		j = subStr.getIntValue();
		if ((j > 0) && (j <= 2048) && (j >= i)) {
			tStr += j;
		}
		else
			tStr = "";

		if (tStr.length() == 0) {
			AlertWindow::showMessageBoxAsync(AlertWindow::InfoIcon, "Track Range Error",
				"Track Range values for this Trigger Function type must be set to 1 - 4096, with HIGH >= LOW");
			return tStr;
		}
	}
	else {
		lowText->setText("");
		highText->setText("");
		tStr += ",";
	}
	tStr += newLine;
	return tStr;
}

// **************************************************************************
// getTrigger(): Look for a trigger number in this string
int MainComponent::getTriggerNum(String tStr)
{

int t;
String subStr;

	if (!tStr.startsWith("#TRIG "))
		return -1;
	subStr = tStr.trimCharactersAtStart("#TRIG ");
	subStr = subStr.upToFirstOccurrenceOf(",", false, false);
	t = subStr.getIntValue();
	if ((t >= 1 || t <= 16))
		return t;
	return -1;
}

// **************************************************************************
// findTrigger(): Look for a trigger entry in the string array
int MainComponent::findTrigger(int t)
{
	for (int i = 0; i < mInitStrings.size(); i++) {
		if (getTriggerNum(mInitStrings[i]) == t)
			return i;
	}
	return -1;
}

// **************************************************************************
// insertTriggerString(): insert an entry for the current trigger settings
//  into the correct element in the init string array.
bool MainComponent::insertTriggerString(void)
{

int n = 0;
bool found = false;
String trigDesc;

	trigDesc = buildTriggerDesc();
	if (trigDesc.length() == 0)
		return false;

	while ((n < mInitStrings.size()) && !found) {
		if (getTriggerNum(mInitStrings[n]) > triggerBox->getSelectedId())
			found = true;
		else if (mInitStrings[n].contains("*"))
			found = true;
		else
			n++;
	}

	if (found)
		mInitStrings.insert(n, trigDesc);
	else
		mInitStrings.add(buildTriggerDesc());
	return true;		
}

// **************************************************************************
// parseTriggerDesc(): Parse the string and update the settings accordingly
bool MainComponent::parseTriggerDesc(String tStr)
{

int t, n, i, j;
String subStr;
StringArray tokens;

	if (!tStr.startsWith("#TRIG "))
		return false;

	// Parse the paramaters into a token string array
	subStr = tStr.trimCharactersAtStart("#TRIG ");
	tokens.addTokens(subStr, false);
	n = tokens.size();
	if (n == 0)
		return false;

	t = tokens[0].getIntValue();
	if ((t < 0) || (t > 16))
		return false;
	triggerBox->setSelectedId(t, dontSendNotification);
	resetTrigger();

	// Read and set the trigger flags
	if (n > 1) {
		i = tokens[1].getIntValue();

		// Type
	    j = (i & TRIG_FLAGS_TYPE) + 1;
		if (j <= typeBox->getNumItems())
			typeBox->setSelectedId(j, dontSendNotification);

		// Interface
		j = ((i & TRIG_FLAGS_INTERFACE) >> 2) + 1;
		if (j <= interfaceBox->getNumItems())
			interfaceBox->setSelectedId(j, dontSendNotification);

		// Invert
		if (i & TRIG_FLAGS_INVERT)
			invertToggle->setToggleState(true, dontSendNotification);
		else
			invertToggle->setToggleState(false, dontSendNotification);

		// Invert
		if (i & TRIG_FLAGS_RETRIGGER)
			retriggerToggle->setToggleState(true, dontSendNotification);
		else
			retriggerToggle->setToggleState(false, dontSendNotification);

		// Loop
		if (i & TRIG_FLAGS_LOOP)
			loopToggle->setToggleState(true, dontSendNotification);
		else
			loopToggle->setToggleState(false, dontSendNotification);

		// Poly
		if (i & TRIG_FLAGS_POLY)
			polyToggle->setToggleState(true, dontSendNotification);
		else
			polyToggle->setToggleState(false, dontSendNotification);

		// Lock
		if (i & TRIG_FLAGS_LOCK)
			lockToggle->setToggleState(true, dontSendNotification);
		else
			lockToggle->setToggleState(false, dontSendNotification);
	}

	// Read and set the trigger volume
	if (n > 2) {
		i = tokens[2].getIntValue();
		if ((i >= -20) && (i <= 10))
			trigVolSlider->setValue(i);
	}

	// Read and set the trigger output
	if (n > 3) {
		i = tokens[3].getIntValue() + 1;
		if ((i > 0) && (i <= outputBox->getNumItems()))
			outputBox->setSelectedId(i, dontSendNotification);
	}

	// Read and set the trigger function
	if (n > 4) {
		i = tokens[4].getIntValue();
		if ((i > 0) && (i <= functionBox->getNumItems()))
			functionBox->setSelectedId(i, dontSendNotification);
	}

	// Read and fill in the track range
	if (n > 5) {
		i = tokens[5].getIntValue();
		if ((i > 0) && (i <= 2048)) {
			subStr = "";
			subStr += i;
			lowText->setText(subStr);
		}
		else
			lowText->setText("");
	}
	if (n > 6) {
		i = tokens[6].getIntValue();
		if ((i > 0) && (i <= 2048)) {
			subStr = "";
			subStr += i;
			highText->setText(subStr);
		}
		else
			highText->setText("");
	}

	// Enable/Disable controls according to these settings:

	t = typeBox->getSelectedId();
	i = functionBox->getSelectedId();

	if ((t == 2) || ((i > 4) && (i != 14)))
		retriggerToggle->setEnabled(false);
	else
		retriggerToggle->setEnabled(true);

	if ((i < 5) || (i == 14) || (i == 8) || (i == 9)) {
		polyToggle->setEnabled(true);
		loopToggle->setEnabled(true);
		trigVolSlider->setEnabled(true);
		labelTriggerVol->setEnabled(true);
		outputBox->setEnabled(true);
		labelOutput->setEnabled(true);
		lockToggle->setEnabled(true);
	}
	else {
		polyToggle->setEnabled(false);
		loopToggle->setEnabled(false);
		trigVolSlider->setEnabled(false);
		labelTriggerVol->setEnabled(false);
		outputBox->setEnabled(false);
		labelOutput->setEnabled(false);
		lockToggle->setEnabled(false);
	}

	if (((i < 2) || (i > 6)) && (i != 14)) {
		lowText->setEnabled(false);
		highText->setEnabled(false);
		labelRange->setEnabled(false);
		labelLow->setEnabled(false);
		labelHigh->setEnabled(false);

	}
	else {
		lowText->setEnabled(true);
		highText->setEnabled(true);
		labelRange->setEnabled(true);
		labelLow->setEnabled(true);
		labelHigh->setEnabled(true);
	}

	if ((i < 4) || (i == 14))
		trigVolSlider->setEnabled(true);
	else
		trigVolSlider->setEnabled(false);

	return true;
}

// **************************************************************************
// deleteInitString(): Look for a trigger entry in the string array
void MainComponent::deleteInitString(int n)
{
	if (n >= mInitStrings.size())
		return;
	mInitStrings.remove(n);
}

// **************************************************************************
// updateInitWindow(): 
void MainComponent::updateInitWindow(void)
{

int i;
String initStr;

	initText->clear();
	for (i = 0; i < mInitStrings.size(); i++) {
		initStr.append(mInitStrings[i], 1024);
	}
	initText->setText(initStr);
}

// **************************************************************************
// save(): 
void MainComponent::save(File saveFile)
{

String line;

	if (saveFile.exists())
		saveFile.deleteFile();
	if (saveFile.create()) {
		FileOutputStream * outStream = saveFile.createOutputStream();
		outStream->writeText(initText->getText(), 0, 0);
		outStream->writeText(newLine, 0, 0);
		delete outStream;
	}
}

// **************************************************************************
// open(): 
void MainComponent::open(File openFile)
{

String line;
int val;

	reset();
	mInitStrings.clear();
	FileInputStream * inStream = openFile.createInputStream();
	do {
		line = inStream->readNextLine();
		if (line.length() > 0) {
			line += newLine;
			mInitStrings.add(line);
		}
	} while (line.length() > 0);
	delete inStream;
	updateInitWindow();

	// Look for #BAUD
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#BAUD")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			switch (val)	{
				case 1200:
					baudBox->setSelectedId(1, dontSendNotification);
				break;
				case 2400:
					baudBox->setSelectedId(2, dontSendNotification);
				break;
				case 9600:
					baudBox->setSelectedId(3, dontSendNotification);
				break;
				case 19200:
					baudBox->setSelectedId(4, dontSendNotification);
				break;
				case 38400:
					baudBox->setSelectedId(5, dontSendNotification);
				break;
			}
		}
	}

	// Look for #MIDI
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#MIDI")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			if (val & 0x01) {
				if (val & 0x02)
					velocityToggle->setToggleState(true, dontSendNotification);
				if (val & 0x04)
					noteOffToggle->setToggleState(true, dontSendNotification);
			}
		}
	}

	// Look for #MREL
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#MREL")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			releaseSlider->setValue((double)val, dontSendNotification);
		}
	}

	// Look for #MCHN
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#MCHN")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			if (val < 17)
				channelBox->setSelectedId((val + 1), dontSendNotification);
		}
	}

	// Look for #BEND
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#BEND")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			if (val < 6)
				pitchBox->setSelectedId(val, dontSendNotification);
		}
	}

	// Look for #VOL1
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#VOL1")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			vol1Slider->setValue((double)val, dontSendNotification);
		}
	}

	// Look for #VOL2
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#VOL2")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			vol2Slider->setValue((double)val, dontSendNotification);
		}
	}

	// Look for #VOL3
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#VOL3")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			vol3Slider->setValue((double)val, dontSendNotification);
		}
	}

	// Look for #VOL4
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#VOL4")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			vol4Slider->setValue((double)val, dontSendNotification);
		}
	}

	// Look for #VOL5
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#VOL5")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			vol5Slider->setValue((double)val, dontSendNotification);
		}
	}

	// Look for #VOL6
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#VOL6")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			vol6Slider->setValue((double)val, dontSendNotification);
		}
	}

	// Look for #VOL7
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#VOL7")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			vol7Slider->setValue((double)val, dontSendNotification);
		}
	}

	// Look for #VOL8
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#VOL8")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			vol8Slider->setValue((double)val, dontSendNotification);
		}
	}

	// Look for #IMIX
	for (int n = 0; n < mInitStrings.size(); n++) {
		if (mInitStrings[n].startsWith("#IMIX")) {
			line = mInitStrings[n].substring(5);
			line = line.trimStart();
			val = line.getIntValue();
			if (val & 0x01)
				toggleOut1->setToggleState(true, dontSendNotification);
			if (val & 0x02)
				toggleOut2->setToggleState(true, dontSendNotification);
			if (val & 0x04)
				toggleOut3->setToggleState(true, dontSendNotification);
			if (val & 0x08)
				toggleOut4->setToggleState(true, dontSendNotification);
		}
	}


	int n = findTrigger(triggerBox->getSelectedId());
	if ((n >= 0) && (n < 128))
	{
		parseTriggerDesc(mInitStrings[n]);
		addButton->setEnabled(false);
		updateButton->setEnabled(true);
		deleteButton->setEnabled(true);
		copyButton->setEnabled(true);
		if (m_portOpenFlag)
			testButton->setEnabled(true);
	}
	else {
		resetTrigger();
		addButton->setEnabled(true);
		updateButton->setEnabled(false);
		deleteButton->setEnabled(false);
		copyButton->setEnabled(false);
		testButton->setEnabled(false);
	}

}


// **************************************************************************
// testTrigger(): Send the current settings to the Communicator
bool MainComponent::testTrigger(void)
{

int trigNum;
int flags;
String s;

	trigNum = triggerBox->getSelectedId() - 1;
	TRIGGER_SETTINGS ts;

	flags = (typeBox->getSelectedId() - 1) & TRIG_FLAGS_TYPE;
	if (interfaceBox->getSelectedId() > 1)
		flags |= TRIG_FLAGS_INTERFACE;
	if (invertToggle->getToggleState())
		flags |= TRIG_FLAGS_INVERT;
	if (retriggerToggle->getToggleState())
		flags |= TRIG_FLAGS_RETRIGGER;
	if (loopToggle->getToggleState())
		flags |= TRIG_FLAGS_LOOP;
	if (polyToggle->getToggleState())
		flags |= TRIG_FLAGS_POLY;
	ts.flags = flags;
	ts.volume = (int)trigVolSlider->getValue();
	ts.output = (int)outputBox->getSelectedId() - 1;
	ts.function = functionBox->getSelectedId();
	s = lowText->getText();
	ts.first = s.getIntValue();
	s = highText->getText();
	ts.last = s.getIntValue();
	pCom->setTrigger(&ts, trigNum);
	return true;
}

